REST

representational state transfer
클라이언트와 서버가 어떻게 서로 소통해야 하는가에 대한 가이드라인,개념(분산 시스템 설계를 위한 아키텍처 스타일)

RESTful

REST가 개념,가이드라인 이라면 RESTful은 이 규칙엔 따르는 시스템이다.(아키텍처 스타일을 모두 만족하는 것을 의미)

RESTful Api란 REST 아키텍처의 원칙을 모두 만족하는 Api란 뜻이다.



REST 가 쓰이는 이유?

1. 분산 시스템을 위해서
큰 에플리케이션을 모듈,기능별로 분리하기 쉬워지기 때문에
(서비스하기만 하면 다른 모듈 또는 어플리케이션이라도 RESTful Api를 통해 상호간에 통신이 가능)

2. 멀티플랫폼및 유지보수에 용이
모바일 애플리케이션으로 html같은 파일을 보내는 것은 비효율적인데 RESTful Api를 사용하면서 데이터만 주고받기 때문에 부담없고 유지보수에 용이하다.


REST의 구성 요소
http url = 자원
http method = 행위
mime type = 표현 방식


REST 제약 조건

1. 각 요청에 클라이언트의 context가 서버에 저장되면 안되고
2. 클라이언트가 응답을 캐싱할 수 있어야한다

unifrom interface = 자원은 유일하게 식별 가능해야하고, http method로 표현을 담아야하고, 메세지는 스스로를 설명할 수 있어야하고(self-descriptive) 하이퍼링크를 통해서 애플리케이션의 상태가 전이(hateoas)되어야 함


장점 : 멀티플랫폼에 용이하고 서버와 클라이언트를 독립적으로 구현할 수 있다.
단점 : 표준,스키마가 없고 메소드가 제한적임, get post put delete등